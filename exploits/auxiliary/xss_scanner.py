"""
xss-scanner
Author: mertbingol0
Date: 11/13/2022
"""

from bs4 import BeautifulSoup as bs
import requests
from urllib.parse import urljoin

def load_payloads(wordlist_file):
    """Load XSS payloads from a wordlist file"""
    payloads = []
    try:
        with open(wordlist_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    payloads.append(line)
        return payloads
    except Exception as e:
        print(f"Error loading payloads: {e}")
        return []

def get_all_forms(url):
    """Retrieve all forms from the target URL"""
    try:
        response = requests.get(url)
        soup = bs(response.content, "html.parser")
        return soup.find_all("form")
    except Exception as e:
        print(f"Error fetching forms from {url}: {e}")
        return []

def get_forms_details(form):
    """Extract form details: action, method, inputs"""
    details = {}
    
    action = form.attrs.get("action", "").lower()
    method = form.attrs.get("method", "get").lower()
    
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    
    return details

def submit_forms(form_details, url, payload):
    """Submit form with the given payload"""
    target_url = urljoin(url, form_details["action"])
    data = {}
    
    for input in form_details["inputs"]:
        # Only fill inputs with a name attribute
        if input["name"] is None:
            continue
        # Inject payload into text, search, or hidden inputs
        if input["type"] in ["text", "search", "hidden"]:
            data[input["name"]] = payload
        else:
            # For other input types, send empty string or default value
            data[input["name"]] = ""
    
    try:
        if form_details["method"] == "post":
            return requests.post(target_url, data=data)
        else:
            return requests.get(target_url, params=data)
    except Exception as e:
        print(f"Error submitting form to {target_url}: {e}")
        return None

def xss_scanner(url, payloads):
    """Scan the target URL for XSS vulnerabilities using the payloads"""
    forms = get_all_forms(url)
    if not forms:
        print("No forms found on the page.")
        return 0
    
    print(f"Found {len(forms)} forms on {url}.")
    print(f"Testing with {len(payloads)} payloads...\n")
    print("Somtimes a false positive occurs!, if you see the tool is saying [VULNERABLE], test that payload to make sure.")
    
    vulnerabilities = 0
    
    for i, form in enumerate(forms, start=1):
        form_details = get_forms_details(form)
        print(f"Testing form #{i} - action: {form_details['action']} method: {form_details['method'].upper()}")
        
        for payload in payloads:
            response = submit_forms(form_details, url, payload)
            if response and payload in response.text:
                print(f"[VULNERABLE] Payload: {payload}")
                vulnerabilities += 1
                # Optionally break after first found vulnerability per form
                # break
    
    return vulnerabilities

if __name__ == "__main__":
    target_url = input("Enter target URL: ").strip()
    wordlist_path = input("Enter path to XSS payload wordlist file: ").strip()
    
    payloads = load_payloads(wordlist_path)
    if not payloads:
        print("No payloads loaded. Exiting.")
        exit()
    
    vuln_count = xss_scanner(target_url, payloads)
    print(f"\nScan complete. Found {vuln_count} potential XSS vulnerabilities.")
