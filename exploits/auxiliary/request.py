# auxiliary/universal/request.py
import requests
import ftplib
import paramiko
import smtplib
import imaplib
import poplib
from smb.SMBConnection import SMBConnection

def run():
    protocol = input("Protocol (http/https/ftp/ssh/smb/smtp/imap/pop3): ").strip().lower()
    target = input("Target IP/Host: ").strip()
    port = input("Port (leave blank for default): ").strip()
    port = int(port) if port else None

    if protocol in ["http", "https"]:
        url = input(f"Enter {protocol.upper()} URL (http(s)://IP:PORT/path): ").strip()
        method = input("Method (GET/POST/PUT/DELETE): ").strip().upper()
        headers = {}
        add_headers = input("Add headers? (y/n): ").strip().lower()
        if add_headers == "y":
            while True:
                h = input("Header (Key:Value) or blank to stop: ").strip()
                if not h: break
                k, v = h.split(":", 1)
                headers[k.strip()] = v.strip()

        data = None
        if method in ["POST", "PUT"]:
            data = input("Enter data (e.g., key=value&key2=value2): ").strip()

        try:
            print(f"[*] Sending {method} request to {url} ...")
            if method == "GET":
                r = requests.get(url, headers=headers, timeout=10, verify=False)
            elif method == "POST":
                r = requests.post(url, data=dict(x.split("=") for x in data.split("&")), headers=headers, timeout=10, verify=False)
            elif method == "PUT":
                r = requests.put(url, data=dict(x.split("=") for x in data.split("&")), headers=headers, timeout=10, verify=False)
            elif method == "DELETE":
                r = requests.delete(url, headers=headers, timeout=10, verify=False)
            else:
                print("[-] Unsupported method")
                return

            print(f"[+] Response Code: {r.status_code}")
            print("[+] Response Body (first 500 chars):")
            print(r.text[:500])
        except Exception as e:
            print(f"[!] Request failed: {e}")

    elif protocol == "ftp":
        user = input("FTP Username: ").strip()
        passwd = input("FTP Password: ").strip()
        if not port: port = 21
        try:
            ftp = ftplib.FTP()
            ftp.connect(target, port, timeout=10)
            ftp.login(user, passwd)
            print(f"[+] FTP Banner: {ftp.getwelcome()}")
            ftp.quit()
        except Exception as e:
            print(f"[!] FTP request failed: {e}")

    elif protocol == "ssh":
        user = input("SSH Username: ").strip()
        passwd = input("SSH Password: ").strip()
        cmd = input("Command to run: ").strip()
        if not port: port = 22
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(target, port, username=user, password=passwd, timeout=10)
            stdin, stdout, stderr = ssh.exec_command(cmd)
            print("[+] Output:\n" + stdout.read().decode())
            ssh.close()
        except Exception as e:
            print(f"[!] SSH request failed: {e}")

    elif protocol == "smb":
        user = input("SMB Username: ").strip()
        passwd = input("SMB Password: ").strip()
        domain = input("SMB Domain (or blank): ").strip()
        if not port: port = 445
        try:
            conn = SMBConnection(user, passwd, "shadowsploit", "target", domain=domain, use_ntlm_v2=True)
            conn.connect(target, port)
            shares = conn.listShares()
            print("[+] SMB Shares:")
            for s in shares:
                print(f"   {s.name}")
            conn.close()
        except Exception as e:
            print(f"[!] SMB request failed: {e}")

    elif protocol == "smtp":
        sender = input("Sender email: ").strip()
        recipient = input("Recipient email: ").strip()
        message = input("Message: ").strip()
        if not port: port = 25
        try:
            server = smtplib.SMTP(target, port, timeout=10)
            server.sendmail(sender, recipient, message)
            server.quit()
            print(f"[+] SMTP message sent to {recipient}")
        except Exception as e:
            print(f"[!] SMTP request failed: {e}")

    elif protocol == "imap":
        user = input("IMAP Username: ").strip()
        passwd = input("IMAP Password: ").strip()
        if not port: port = 143
        try:
            conn = imaplib.IMAP4(target, port)
            conn.login(user, passwd)
            print("[+] IMAP Login successful")
            conn.logout()
        except Exception as e:
            print(f"[!] IMAP request failed: {e}")

    elif protocol == "pop3":
        user = input("POP3 Username: ").strip()
        passwd = input("POP3 Password: ").strip()
        if not port: port = 110
        try:
            conn = poplib.POP3(target, port, timeout=10)
            conn.user(user)
            conn.pass_(passwd)
            print("[+] POP3 Login successful")
            conn.quit()
        except Exception as e:
            print(f"[!] POP3 request failed: {e}")

    else:
        print("[-] Unsupported protocol")
