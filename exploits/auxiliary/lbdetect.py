# Install required packages first

import dns.resolver
import requests
from collections import defaultdict
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def check_dns_load_balancing(domain):
    try:
        answers = dns.resolver.resolve(domain, 'A')
        ips = [rdata.address for rdata in answers]
        print(f"\nDNS Check for {domain}:")
        print(f"Found {len(ips)} IP addresses: {ips}")
        return len(ips) > 1
    except Exception as e:
        print(f"DNS Error: {e}")
        return False

def check_http_load_balancing(domain, use_https=False):
    headers_list = []
    lb_headers = set()
    protocol = 'https' if use_https else 'http'
    print(f"\nHTTP{'S' if use_https else ''} Check for {domain}:")
    
    for _ in range(5):
        try:
            response = requests.get(
                f"{protocol}://{domain}",
                allow_redirects=True,
                timeout=5,
                verify=False
            )
            headers = response.headers
            headers_list.append(headers)
            
            for header in headers:
                if header.lower().startswith(('x-forwarded', 'via', 'x-cache')):
                    lb_headers.add(header)
                    
        except Exception as e:
            print(f"HTTP{'S' if use_https else ''} Error: {e}")
            return False

    header_variations = defaultdict(set)
    for headers in headers_list:
        for h, v in headers.items():
            header_variations[h].add(v)

    print("\n[Load Balancer Indicators]")
    print(f"LB-related headers: {', '.join(lb_headers) or 'None'}")
    
    server_headers = header_variations.get('Server', set())
    print(f"Server header variations: {len(server_headers)}")
    
    lb_cookies = any('BIGipServer' in cookie or 'F5' in cookie 
                    for cookie in header_variations.get('Set-Cookie', []))
    print(f"LB cookies detected: {lb_cookies}")
    
    return len(server_headers) > 1 or lb_headers or lb_cookies

def main():
    domain = input("Enter target domain: ").strip()
    if not domain:
        print("No domain entered!")
        return

    dns_lb = check_dns_load_balancing(domain)
    http_lb = check_http_load_balancing(domain, use_https=False)
    https_lb = check_http_load_balancing(domain, use_https=True)

    print("\n[Final Results]")
    print(f"DNS Load Balancing: {'Yes' if dns_lb else 'No'}")
    print(f"HTTP Load Balancing: {'Yes' if http_lb else 'No'}") 
    print(f"HTTPS Load Balancing: {'Yes' if https_lb else 'No'}")

if __name__ == "__main__":
    main()
