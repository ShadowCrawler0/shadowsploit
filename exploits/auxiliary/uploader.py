# auxiliary/universal/upload.py
import ftplib
import paramiko
import requests
from smb.SMBConnection import SMBConnection
import smtplib
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email import encoders

def run():
    protocol = input("Protocol (ftp/ssh/http/https/smb/smtp/snmp): ").strip().lower()
    target = input("Target IP: ").strip()
    port = input("Port (leave blank for default): ").strip()
    port = int(port) if port else None
    local_file = input("Local file to upload: ").strip()

    if protocol == "ftp":
        user = input("FTP Username: ").strip()
        passwd = input("FTP Password: ").strip()
        remote_path = input("Remote path (e.g., /var/www/html/rev.php): ").strip()
        if not port: port = 21
        try:
            ftp = ftplib.FTP()
            ftp.connect(target, port, timeout=10)
            ftp.login(user, passwd)
            with open(local_file, "rb") as f:
                ftp.storbinary(f"STOR {remote_path}", f)
            print(f"[+] FTP upload complete: {remote_path}")
            ftp.quit()
        except Exception as e:
            print(f"[!] FTP upload failed: {e}")

    elif protocol == "ssh":
        user = input("SSH Username: ").strip()
        passwd = input("SSH Password: ").strip()
        remote_path = input("Remote path: ").strip()
        if not port: port = 22
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(target, port, username=user, password=passwd, timeout=10)
            sftp = ssh.open_sftp()
            sftp.put(local_file, remote_path)
            print(f"[+] SSH upload complete: {remote_path}")
            sftp.close()
            ssh.close()
        except Exception as e:
            print(f"[!] SSH upload failed: {e}")

    elif protocol in ["http", "https"]:
        url = input(f"Enter {protocol.upper()} URL (http(s)://IP:PORT/path): ").strip()
        method = input("Method (POST/PUT): ").strip().upper()
        try:
            with open(local_file, "rb") as f:
                files = {"file": f}
                if method == "POST":
                    r = requests.post(url, files=files, timeout=10, verify=False)
                else:
                    r = requests.put(url, data=f, timeout=10, verify=False)
            print(f"[+] {protocol.upper()} upload status: {r.status_code}")
        except Exception as e:
            print(f"[!] {protocol.upper()} upload failed: {e}")

    elif protocol == "smb":
        user = input("SMB Username: ").strip()
        passwd = input("SMB Password: ").strip()
        domain = input("SMB Domain (or blank): ").strip()
        share = input("SMB Share name: ").strip()
        remote_path = input("Remote path (inside share): ").strip()
        if not port: port = 445
        try:
            conn = SMBConnection(user, passwd, "shadowsploit", "target", domain=domain, use_ntlm_v2=True)
            conn.connect(target, port)
            with open(local_file, "rb") as f:
                conn.storeFile(share, remote_path, f)
            print(f"[+] SMB upload complete: {share}/{remote_path}")
            conn.close()
        except Exception as e:
            print(f"[!] SMB upload failed: {e}")

    elif protocol == "smtp":
        sender = input("Sender email: ").strip()
        recipient = input("Recipient email: ").strip()
        if not port: port = 25
        try:
            msg = MIMEMultipart()
            msg["From"] = sender
            msg["To"] = recipient
            msg["Subject"] = "ShadowSploit Upload"

            part = MIMEBase("application", "octet-stream")
            with open(local_file, "rb") as f:
                part.set_payload(f.read())
            encoders.encode_base64(part)
            part.add_header("Content-Disposition", f"attachment; filename={local_file}")
            msg.attach(part)

            server = smtplib.SMTP(target, port, timeout=10)
            server.sendmail(sender, recipient, msg.as_string())
            server.quit()
            print(f"[+] SMTP upload (sent as attachment) to {recipient}")
        except Exception as e:
            print(f"[!] SMTP upload failed: {e}")

    elif protocol == "snmp":
        print("[*] SNMP write support is very rare. This is a placeholder for future module (using pysnmp).")
        print("[!] Not implemented in this version.")

    else:
        print("[-] Unsupported protocol")
