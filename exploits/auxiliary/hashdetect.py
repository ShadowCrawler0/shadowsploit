import re

# Dictionary of common hash types with regex patterns and lengths
HASH_TYPES = {
    'MD5': {
        'length': [32],
        'pattern': re.compile(r'^[a-fA-F0-9]{32}$')
    },
    'SHA-1': {
        'length': [40],
        'pattern': re.compile(r'^[a-fA-F0-9]{40}$')
    },
    'SHA-224': {
        'length': [56],
        'pattern': re.compile(r'^[a-fA-F0-9]{56}$')
    },
    'SHA-256': {
        'length': [64],
        'pattern': re.compile(r'^[a-fA-F0-9]{64}$')
    },
    'SHA-384': {
        'length': [96],
        'pattern': re.compile(r'^[a-fA-F0-9]{96}$')
    },
    'SHA-512': {
        'length': [128],
        'pattern': re.compile(r'^[a-fA-F0-9]{128}$')
    },
    'NTLM': {
        'length': [32],
        'pattern': re.compile(r'^[a-fA-F0-9]{32}$')
    },
    'MySQL5': {
        'length': [16],
        'pattern': re.compile(r'^\*[A-F0-9]{40}$')
    },
    'Unix MD5': {
        'length': [34],
        'pattern': re.compile(r'^\$1\$[a-zA-Z0-9./]{8}\$[a-zA-Z0-9./]{22}$')
    },
    'bcrypt': {
        'length': [60],
        'pattern': re.compile(r'^\$2[aby]\$[0-9]{2}\$[./A-Za-z0-9]{53}$')
    },
    # Add more hash types and patterns as needed
}

def identify_hash(hash_str):
    hash_str = hash_str.strip()
    possible_hashes = []

    for hash_name, props in HASH_TYPES.items():
        if len(hash_str) in props['length'] and props['pattern'].match(hash_str):
            possible_hashes.append(hash_name)

    if possible_hashes:
        return possible_hashes
    else:
        return ['Unknown or unsupported hash type']

def main():
    print("Simple Hash Identifier Tool")
    user_hash = input("Enter the hash string to identify: ").strip()
    results = identify_hash(user_hash)
    print("\nPossible hash types:")
    for r in results:
        print(f"- {r}")

if __name__ == "__main__":
    main()
