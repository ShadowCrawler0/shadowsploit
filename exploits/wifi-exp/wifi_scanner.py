from scapy.all import *

# To keep track of discovered APs and clients
seen_aps = set()
seen_clients = set()

def packet_handler(pkt):
    # Detect APs (Beacon frames)
    if pkt.haslayer(Dot11Beacon):
        ssid = pkt[Dot11Elt].info.decode(errors="ignore")
        bssid = pkt[Dot11].addr2
        channel = None

        # Find channel from DS Parameter Set element
        elt = pkt[Dot11Elt]
        while elt:
            if elt.ID == 3:
                channel = elt.info[0]
                break
            elt = elt.payload.getlayer(Dot11Elt)

        if bssid not in seen_aps:
            seen_aps.add(bssid)
            print(f"[AP] SSID: {ssid}, BSSID: {bssid}, Channel: {channel}")

    # Detect Clients (Data frames with ToDS or FromDS flags)
    elif pkt.haslayer(Dot11):
        addr1 = pkt.addr1  # Receiver
        addr2 = pkt.addr2  # Transmitter
        # ToDS=1 or FromDS=1 means data frame involving AP and client
        if pkt.FCfield & 0x3 != 0:
            # addr1 or addr2 might be AP or Client, depending on ToDS/FromDS flags
            # Typically:
            # If ToDS=1: addr1 = AP, addr2 = Client
            # If FromDS=1: addr1 = Client, addr2 = AP
            client = None
            ap = None
            if pkt.FCfield & 0x1:  # ToDS=1
                ap = addr1
                client = addr2
            elif pkt.FCfield & 0x2:  # FromDS=1
                ap = addr2
                client = addr1

            if client and ap and client not in seen_clients:
                seen_clients.add(client)
                print(f"  [Client] MAC: {client} associated with AP: {ap}")

if __name__ == "__main__":
    iface = input("Enter your monitor mode interface (e.g., wlan0mon): ").strip()
    print(f"[*] Scanning Wi-Fi networks and clients on interface {iface}...")
    sniff(iface=iface, prn=packet_handler)
