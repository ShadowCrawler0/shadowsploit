import requests
import re

# Large WAF signature database
WAF_SIGNATURES = {
    "Cloudflare (USA)": ["cloudflare", "cf-ray", "__cfduid"],
    "AWS WAF (USA)": ["x-amzn-waf", "awswaf"],
    "AWS CloudFront WAF": ["cloudfront"],
    "Akamai (USA)": ["akamai", "akamai-bot", "akamaighost"],
    "F5 BIG-IP (USA)": ["bigip", "f5avr", "f5-waf", "f5"],
    "F5 Advanced WAF": ["x-f5-waf", "f5aw"],
    "Imperva Incapsula (USA)": ["incapsula", "visid_incap"],
    "Sucuri (USA)": ["sucuri", "x-sucuri"],
    "Barracuda (USA)": ["barracuda", "barra-counter"],
    "ModSecurity (Open Source)": ["mod_security", "modsecurity"],
    "Fortinet FortiWeb (USA)": ["fortinet", "fortiweb"],
    "Wordfence (USA)": ["wordfence"],
    "Palo Alto Networks": ["paloalto-waf"],
    "Citrix Web App Firewall": ["netscaler", "citrix"],
    "Sophos UTM": ["sophos"],
    "Check Point": ["checkpoint"],
    "Microsoft Azure WAF": ["azure-waf"],
    "Google Cloud Armor": ["gclb"],
    "Trustwave WAF": ["trustwave"],
    "Signal Sciences": ["signalsciences"],
    "360 WAF (China)": ["360wzb", "360waf"],
    "Huawei WAF (China)": ["huawei"],
    "Alibaba Cloud WAF (China)": ["aliyunwaf", "aliyun"],
    "NSFOCUS (China)": ["nsfocus"],
    "Tencent WAF": ["tencent"],
    "WAPPLES (South Korea)": ["wappLES"],
    "Kaspersky WAF (Russia)": ["kaspersky"],
    "RuWAF (Russia)": ["ruwaf"],
    "Iranian FaraID WAF": ["faradid"],
    "Iranian Arya WAF": ["arya-waf"],
    "Iranian Pars WAF": ["pars_waf"],
    "Blueliv": ["blueliv"],
    "Netsparker WAF": ["netsparker"],
    "Wallarm (Russia/EU)": ["wallarm"],
    "DenyALL (France)": ["denyall"],
    "Radware DefensePro (Israel)": ["radware", "defensepro"],
    "Positive Technologies": ["positivewaf"],
    "AppTrana (India)": ["apptrana"],
    "Reblaze (Israel)": ["reblaze"],
    "StackPath (USA)": ["stackpath"],
    "Fastly (USA)": ["fastly"],
    "DotDefender": ["dotdefender"],
    "Cisco ACE": ["ace_xml"],
    "Profense": ["profense"],
    "WatchGuard": ["watchguard"],
    "Grey Wizard": ["greywizard"],
    "Airee": ["airee"],
    "OpenResty WAF": ["openresty"],
    "ZenEdge": ["zenedge"],
    "Armor Defense": ["armordefense"],
    "Safe3 WAF": ["safe3"],
    "Yundun WAF": ["yundun"],
    "Jiasule WAF": ["jiasule"]
}

def extract_version(text):
    match = re.search(r"v(?:ersion)?[\s:=]+([\d]+(?:\.[\d]+)+)", text, re.I)
    return match.group(1) if match else None

def normalize_input(domain):
    if domain.startswith("http://") or domain.startswith("https://"):
        return domain
    try:
        requests.get(f"https://{domain}", timeout=5)
        return f"https://{domain}"
    except:
        return f"http://{domain}"

def detect_waf(url):
    try:
        headers = {
            "User-Agent": "Mozilla/5.0",
            "X-Forwarded-For": "127.0.0.1",
        }
        resp = requests.get(url, headers=headers, timeout=10)
        body = resp.text.lower()
        headers_lower = {k.lower(): v.lower() for k, v in resp.headers.items()}
        cookies = resp.cookies.get_dict()

        combined = " ".join(list(headers_lower.values()) + list(cookies.values()) + [body])
        found_waf = None
        version = None

        for waf, signatures in WAF_SIGNATURES.items():
            for sig in signatures:
                if sig.lower() in combined:
                    found_waf = waf
                    version = extract_version(combined)
                    break
            if found_waf:
                break

        if found_waf:
            return f"[+] WAF Detected: {found_waf} (version {version if version else 'unknown'})"
        else:
            return "[-] No WAF detected."

    except requests.RequestException as e:
        return f"[!] Connection error: {e}"

# Example usage:
url = input("Enter target domain: ") 
full_url = normalize_input(url)
print(detect_waf(full_url))
