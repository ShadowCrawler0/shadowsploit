import socket
import argparse
import threading

def handle_client(client_socket, address):
    print(f"[+] Connection received from {address[0]}:{address[1]}")
    client_socket.send(b"[+] Connected to Python listener. Type commands:\n")
    try:
        while True:
            cmd = input("Shell> ")
            if cmd.strip().lower() in ('exit', 'quit'):
                client_socket.send(b"exit\n")
                break
            if cmd:
                client_socket.send(cmd.encode() + b"\n")
                response = client_socket.recv(4096)
                print(response.decode(errors='ignore'), end='')
    except Exception as e:
        print(f"[-] Error during session: {e}")
    finally:
        client_socket.close()
        print("[*] Connection closed.")

def start_listener(port, bind_ip='0.0.0.0'):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((bind_ip, port))
    server.listen(1)
    print(f"[+] Listening on {bind_ip}:{port}...")

    client_socket, addr = server.accept()
    client_thread = threading.Thread(target=handle_client, args=(client_socket, addr))
    client_thread.start()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Python Netcat-style Listener")
    parser.add_argument("-p", "--port", type=int, required=True, help="Port to listen on")
    parser.add_argument("-i", "--ip", default="0.0.0.0", help="IP address to bind to (default: all interfaces)")

    args = parser.parse_args()
    start_listener(args.port, args.ip)
